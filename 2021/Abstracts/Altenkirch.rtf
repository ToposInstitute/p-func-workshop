{\rtf1\ansi\ansicpg1252\cocoartf1671\cocoasubrtf200
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\margl1440\margr1440\vieww15160\viewh8100\viewkind1
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 Inductive types are playing a central role in Type Theory. They can be modelled using initial algebra of functors. However, not all functors have an initial algebra and the syntactic condition of strict positivity is reflected by the requirement that the functor is a\
container aka a polynomial functor. The term container derives from the intuition that an element of such a type *contains* the data it is parametrised by.\
\
Recent generalisations of inductive types include inductive-inductive types (IITs), quotient inductive-inductive types (QIITs, related to generalised algebraic types) and higher inductive-inductive types (HIITs). In this setting we cannot identify one functor since the types of one constructor can refer to a previous one. An example where this shows up is the intrinsic syntax of dependently typed languages, where intrinsic means that we avoid untyped preterms. In our talk we describe recent and ongoing work how to capture these situations semantically and syntactically. We exploit the view that a generalised container is a presheaf that is a sum of representables where the base\
category is the category of algebras of the previous constructors. We present a new syntax for QIITs which is itself a QIIT and we conjecture to be complete for the semantics.\
}